{"version":3,"sources":["customHooks/useFormInput.tsx","customHooks/useList.tsx","components/todos.tsx","components/App.tsx","index.tsx"],"names":["useFormInput","initaialInput","useState","input","setInput","valid","setValid","onChange","value","length","resetInput","useList","initialValue","todosList","setTodosList","addTodoHandler","todo","todos","push","id","complete","window","localStorage","setItem","JSON","stringify","toggleTodoHandler","todoId","map","setTodos","list","AddTodo","useEffect","getItem","parsedList","parse","className","type","e","target","onClick","key","App","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAsBeA,EApBM,SAACC,GAA0B,IAAD,EACnBC,mBAASD,GADU,mBACtCE,EADsC,KAC/BC,EAD+B,OAEnBF,oBAAS,GAFU,mBAEtCG,EAFsC,KAE/BC,EAF+B,KAiB3C,MAAO,CAACH,QAAOE,QAAOE,SAbP,SAACC,GACS,kBAAXA,GAAkC,KAAVA,GAAgBA,EAAMC,QAAU,KAC9DL,EAASI,GACTF,GAAS,KAGTF,EAAS,IACTE,GAAS,KAMeI,WAHb,WACfN,EAAS,O,eCoBFO,EA7BC,SAACC,GAA0B,IAAD,EACJV,mBAASU,GADL,mBAC/BC,EAD+B,KACpBC,EADoB,KAyBtC,MAAO,CACHD,YAAWE,eAvBQ,SAACC,GACpB,IAAIC,EAAK,YAAOJ,GAChBI,EAAMC,KAAK,CACPC,GAAIF,EAAMR,OAAS,EACnBO,KAAMA,EACNI,UAAU,IAEdN,EAAaG,GACbI,OAAOC,aAAaC,QAAQ,YAAaC,KAAKC,UAAUR,KAe7BS,kBAbL,SAACC,GACxB,IAAIV,EAAOJ,EAAUe,KAAI,SAAAZ,GACpB,OAAGA,EAAKG,KAAOQ,EACP,2BAAIX,GAAX,IAAiBI,UAAYJ,EAAKI,WAEvBJ,KAEhBF,EAAaG,IAMiCY,SAJjC,SAACC,GACdhB,EAAagB,MCUNC,EApCW,WACtBC,qBAAU,WACN,IAAIF,EAAOT,OAAOC,aAAaW,QAAQ,aACnCC,EAAaJ,EAAON,KAAKW,MAAML,GAAQ,MAAQ,KAC/CI,GAAoC,IAAtBA,EAAWzB,QACzBoB,EAASK,KAEd,IAPyB,MAQiBlC,EAAa,IAApDG,EARsB,EAQtBA,MAAOE,EARe,EAQfA,MAAOE,EARQ,EAQRA,SAAUG,EARF,EAQEA,WARF,EAUqCC,EAAQ,IAAnEE,EAVsB,EAUtBA,UAAWE,EAVW,EAUXA,eAAgBW,EAVL,EAUKA,kBAAmBG,EAVxB,EAUwBA,SAepD,OACI,yBAAKO,UAAU,aACX,2BAAOC,KAAK,OAAO7B,MAAOL,EAAOI,SAAU,SAAA+B,GAAC,OAAI/B,EAAS+B,EAAEC,OAAO/B,UAClE,4BAAQ4B,UAAU,SAAS5B,MAAM,MAAMgC,QAhB/B,WACRnC,IACAU,EAAeZ,GACfO,OAaA,QACsB,IAArBG,EAAUJ,OACP,4BAVDI,EAAUe,KAAI,SAACZ,GAAD,OAAU,wBAAKoB,UAAU,WAAWK,IAAKzB,EAAKG,IAC/D,0BAAOiB,UAAWpB,EAAKI,SAAW,SAAW,YAAaoB,QAAS,kBAAMd,EAAkBV,EAAKG,MAAMH,EAAKA,KAA3G,IAAkHA,EAAKI,SAAvH,UAWY,OCxBTsB,E,uKARX,OACE,yBAAKN,UAAU,OACT,kBAAC,EAAD,W,GAJMO,aCClBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ba91eaca.chunk.js","sourcesContent":["import React , {useState} from 'react';\r\n  \r\nconst useFormInput = (initaialInput: string)=> {\r\n  const [input, setInput] = useState(initaialInput);\r\n  const [valid, setValid] = useState(false);\r\n\r\n   const onChange= (value: string)=> {\r\n        if(typeof(value) === 'string'  && value !== '' && value.length <= 100) {\r\n            setInput(value);\r\n            setValid(true);\r\n        }\r\n        else {\r\n            setInput('')\r\n            setValid(false)\r\n        }\r\n    }\r\n    const resetInput = ()=> {\r\n        setInput('');\r\n    }\r\n    return {input, valid, onChange, resetInput}\r\n}\r\n\r\nexport default useFormInput;\r\n","import React, { useState } from 'react';\r\n\r\ninterface Todo {\r\n    id: number,\r\n    todo: string,\r\n    complete: boolean\r\n}\r\n\r\nconst useList = (initialValue: Todo[]) => {\r\n    const [todosList, setTodosList] = useState(initialValue);\r\n\r\n    const addTodoHandler = (todo: string) => {\r\n        let todos = [...todosList];\r\n        todos.push({\r\n            id: todos.length + 1,\r\n            todo: todo,\r\n            complete: false\r\n        });\r\n        setTodosList(todos);\r\n        window.localStorage.setItem('savedList', JSON.stringify(todos));\r\n    }\r\n    const toggleTodoHandler = (todoId: number) => {\r\n       let todos= todosList.map(todo=> {\r\n            if(todo.id === todoId) {\r\n             return {...todo, complete : !todo.complete}\r\n            }\r\n            else return todo;\r\n        })\r\n        setTodosList(todos);\r\n    }\r\n    const setTodos = (list: Todo[]) => {\r\n        setTodosList(list)\r\n    } \r\n    return {\r\n        todosList, addTodoHandler, toggleTodoHandler, setTodos\r\n    }\r\n}\r\nexport default useList;","import React, { useEffect } from \"react\";\r\nimport '../styles/todo.css'\r\nimport useFormInput from '../customHooks/useFormInput';\r\nimport useList from '../customHooks/useList';\r\n\r\nconst AddTodo: React.FC = () => {\r\n    useEffect(() => {\r\n        let list = window.localStorage.getItem('savedList');\r\n        let parsedList = list ? JSON.parse(list || '[]') : null;\r\n        if (parsedList && parsedList.length !== 0) {\r\n            setTodos(parsedList);\r\n        }\r\n    }, [])\r\n    let { input, valid, onChange, resetInput } = useFormInput('');\r\n\r\n    let { todosList, addTodoHandler, toggleTodoHandler, setTodos } = useList([]);\r\n\r\n    const addTodo = () => {\r\n        if (valid) {\r\n            addTodoHandler(input)\r\n            resetInput();\r\n        }\r\n        else return;\r\n    }\r\n    const renderList = () => {\r\n        return todosList.map((todo) => < li className='listType' key={todo.id}>\r\n            <span  className={todo.complete ? \"strike\" : \"undefined\"} onClick={() => toggleTodoHandler(todo.id)}>{todo.todo} {todo.complete} </span>\r\n        </li>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"list-view\" >\r\n            <input type='text' value={input} onChange={e => onChange(e.target.value)} />\r\n            <button className=\"button\" value=\"add\" onClick={addTodo}> Add</button>\r\n            {todosList.length !== 0 ?\r\n                <ul>\r\n                    {renderList()}\r\n                </ul> : null}\r\n        </div>\r\n    )\r\n}\r\nexport default AddTodo;","import React, { Component } from 'react';\r\nimport AddTodo from './todos';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n            <AddTodo/>\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}